/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import library.models.Book;
import library.models.BorrowTransaction;
import library.models.Category;
import library.models.UserMember;
import library.renderer.CategoryListCellRenderer;
import library.utils.BookFineFacade;
import library.utils.DBConnectionInterface;
import library.utils.JournalFactory;
import library.utils.NormalBookFactory;
import library.utils.NovelFactory;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author eva
 */
public class Librarians extends javax.swing.JFrame {

    /**
     * Creates new form Librarians
     */
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet resultSet = null;

    private Category category;
    private Category selectedBookCategory;

    private Book book;
    private UserMember member;

    private BorrowTransaction borrowTransaction;
    private final DBConnectionInterface dBConnectionInterface = new DatabaseConnection();

    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

    public Librarians() {
        initComponents();

        displayCategoriesTable();
        setCategoriesTableListener();

        displayBooksTable();
        setBooksTableListener();

        displayMembersTable();
        setMembersTableListener();

        displayBorrowedBooksTable();
        setBorrowedBooksTableListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        borrowBookTabbedPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        borrowBookBookIDLabel = new javax.swing.JLabel();
        borrowBookBookTitleLabel = new javax.swing.JLabel();
        borrowBookBookCopiesLabel = new javax.swing.JLabel();
        borrowBookFinePerDayLabel = new javax.swing.JLabel();
        borrowBookBookIdTextField = new javax.swing.JTextField();
        borroBookBookSearchButton = new javax.swing.JButton();
        borrowBookTitleTextField = new javax.swing.JTextField();
        borrowBookCopiesTextField = new javax.swing.JTextField();
        borrowBookFinePerDayTextField = new javax.swing.JTextField();
        borrowBookmemberIdLabel = new javax.swing.JLabel();
        borrowBookMemberNameLabel = new javax.swing.JLabel();
        borrowBookMemberIdTextField = new javax.swing.JTextField();
        borrowBookMemberNameTextField = new javax.swing.JTextField();
        borrowBookMemberSearchButton = new javax.swing.JButton();
        borrowBookLibrarianIdLabel = new javax.swing.JLabel();
        borrowBookLibrarianNameLabel = new javax.swing.JLabel();
        borrowBookLibrarianIdTextField = new javax.swing.JTextField();
        borrowBookLibrarianNameTextField = new javax.swing.JTextField();
        borrowBookLibrarianSearchButton = new javax.swing.JButton();
        borrowBookIssueButton = new javax.swing.JButton();
        borrowBookDateOfIssueLabel = new javax.swing.JLabel();
        borrowBookDateOfIssueTextField = new javax.swing.JTextField();
        borrowBookLabel = new javax.swing.JLabel();
        borrowBookDueDateTextField = new javax.swing.JTextField();
        clearBorrowBookButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        memberNameLabel = new javax.swing.JLabel();
        memberContactLabel = new javax.swing.JLabel();
        memberEmailLabel = new javax.swing.JLabel();
        memberGenderLabel = new javax.swing.JLabel();
        memberPasswordLabel = new javax.swing.JLabel();
        memberNameTextField = new javax.swing.JTextField();
        memberPhoneContactTextField = new javax.swing.JTextField();
        memberEmailTextField = new javax.swing.JTextField();
        memberGenderTextField = new javax.swing.JTextField();
        memberPasswordTextField = new javax.swing.JTextField();
        saveMemberButton = new javax.swing.JButton();
        updateMemberButton = new javax.swing.JButton();
        deleteMemberButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        membersTable = new javax.swing.JTable();
        clearMemberButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        categoryNameTextField = new javax.swing.JTextField();
        saveCategoryButton = new javax.swing.JButton();
        updateCategoryButton = new javax.swing.JButton();
        deleteCategoryButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        categoriesTable = new javax.swing.JTable();
        clearCategoryButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        retrurnBookMemberIdLabel = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        returnBookMemberIdTextField = new javax.swing.JTextField();
        returnBookMemberNameTextField = new javax.swing.JTextField();
        returnBookBookTitleTextField = new javax.swing.JTextField();
        returnBookDueDateTextField = new javax.swing.JTextField();
        returnBookReturnDateTextField = new javax.swing.JTextField();
        returnBookTotalFineTextField = new javax.swing.JTextField();
        retrunBookButton = new javax.swing.JButton();
        returnBookSearchButton = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        returnBookIssueDateTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        borrowedBooksTable = new javax.swing.JTable();
        clearReturnBookButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        bookCategoryNameLabel = new javax.swing.JLabel();
        bookTitleLabel = new javax.swing.JLabel();
        bookEditionLabel = new javax.swing.JLabel();
        bookAuthorLabel = new javax.swing.JLabel();
        bookPublisherLabel = new javax.swing.JLabel();
        bookCopiesLabel = new javax.swing.JLabel();
        bookFinePerDayLabel = new javax.swing.JLabel();
        bookRemarksLabel = new javax.swing.JLabel();
        bookTitleTextField = new javax.swing.JTextField();
        bookAuthorTextField = new javax.swing.JTextField();
        bookPublisherTextField = new javax.swing.JTextField();
        bookCopiesTextField = new javax.swing.JTextField();
        bookFineTextField = new javax.swing.JTextField();
        bookRemarkTextField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        saveBookButton = new javax.swing.JButton();
        updateBookButton = new javax.swing.JButton();
        deleteBookButton = new javax.swing.JButton();
        bookCategoryNameComboBox = new javax.swing.JComboBox<>();
        bookEditionComboBox = new javax.swing.JComboBox<>();
        bookTypeLabel = new javax.swing.JLabel();
        bookTypeComboBox = new javax.swing.JComboBox<>();
        bookNoOfArticlesPublishedLabel = new javax.swing.JLabel();
        bookNoOfArticlesPublishedTextField = new javax.swing.JTextField();
        clearBooksButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Book Antiqua", 1, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-library-50.png"))); // NOI18N
        jLabel1.setText("Tusome Library System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.setFocusable(false);
        borrowBookTabbedPane.setFont(new java.awt.Font("Book Antiqua", 1, 11)); // NOI18N
        borrowBookTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowBookTabbedPaneMouseClicked(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel25.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        jLabel25.setText("BOOK  DETAILS");

        jLabel26.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        jLabel26.setText("LIBRARIAN  DETAILS");

        jLabel27.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        jLabel27.setText("MEMBER  DETAILS");

        borrowBookBookIDLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookBookIDLabel.setText("Book ID:");

        borrowBookBookTitleLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookBookTitleLabel.setText("Title:");

        borrowBookBookCopiesLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookBookCopiesLabel.setText("Copies:");

        borrowBookFinePerDayLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookFinePerDayLabel.setText("Fine per day:");

        borrowBookBookIdTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        borroBookBookSearchButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        borroBookBookSearchButton.setText("Search");
        borroBookBookSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borroBookBookSearchButtonMouseClicked(evt);
            }
        });

        borrowBookTitleTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookTitleTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookTitleTextField.setEnabled(false);
        borrowBookTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBookTitleTextFieldActionPerformed(evt);
            }
        });

        borrowBookCopiesTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookCopiesTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookCopiesTextField.setEnabled(false);

        borrowBookFinePerDayTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookFinePerDayTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookFinePerDayTextField.setEnabled(false);

        borrowBookmemberIdLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookmemberIdLabel.setText("ID:");

        borrowBookMemberNameLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookMemberNameLabel.setText("Name:");

        borrowBookMemberIdTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        borrowBookMemberNameTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookMemberNameTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookMemberNameTextField.setEnabled(false);

        borrowBookMemberSearchButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        borrowBookMemberSearchButton.setText("Search");
        borrowBookMemberSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowBookMemberSearchButtonMouseClicked(evt);
            }
        });

        borrowBookLibrarianIdLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookLibrarianIdLabel.setText("ID:");

        borrowBookLibrarianNameLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookLibrarianNameLabel.setText("Name:");

        borrowBookLibrarianIdTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        borrowBookLibrarianNameTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookLibrarianNameTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookLibrarianNameTextField.setEnabled(false);
        borrowBookLibrarianNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBookLibrarianNameTextFieldActionPerformed(evt);
            }
        });

        borrowBookLibrarianSearchButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        borrowBookLibrarianSearchButton.setText("Search");
        borrowBookLibrarianSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowBookLibrarianSearchButtonMouseClicked(evt);
            }
        });

        borrowBookIssueButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        borrowBookIssueButton.setText("Issue");
        borrowBookIssueButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowBookIssueButtonMouseClicked(evt);
            }
        });

        borrowBookDateOfIssueLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookDateOfIssueLabel.setText("Date of issue:");

        borrowBookDateOfIssueTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookDateOfIssueTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookDateOfIssueTextField.setEnabled(false);

        borrowBookLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        borrowBookLabel.setText("Due date:");

        borrowBookDueDateTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowBookDueDateTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        borrowBookDueDateTextField.setEnabled(false);
        borrowBookDueDateTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowBookDueDateTextFieldMouseClicked(evt);
            }
        });

        clearBorrowBookButton.setFont(new java.awt.Font("Constantia", 1, 12)); // NOI18N
        clearBorrowBookButton.setText("Clear");
        clearBorrowBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearBorrowBookButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(borrowBookBookCopiesLabel)
                                .addGap(51, 51, 51)
                                .addComponent(borrowBookCopiesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(borrowBookBookIDLabel)
                                    .addComponent(borrowBookBookTitleLabel))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(borrowBookBookIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                    .addComponent(borrowBookTitleTextField))))
                        .addGap(23, 23, 23)
                        .addComponent(borroBookBookSearchButton))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(borrowBookFinePerDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(borrowBookDateOfIssueLabel)
                                    .addComponent(borrowBookFinePerDayLabel))
                                .addComponent(borrowBookLabel))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(borrowBookDueDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                .addComponent(borrowBookDateOfIssueTextField)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(borrowBookmemberIdLabel)
                            .addComponent(borrowBookMemberNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(borrowBookMemberNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(borrowBookMemberIdTextField))
                        .addGap(23, 23, 23)
                        .addComponent(borrowBookMemberSearchButton))
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borrowBookLibrarianIdLabel)
                    .addComponent(borrowBookLibrarianNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(borrowBookLibrarianIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(borrowBookLibrarianSearchButton))
                    .addComponent(borrowBookLibrarianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(246, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 433, Short.MAX_VALUE)
                .addComponent(borrowBookIssueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(clearBorrowBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(468, 468, 468))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookBookIDLabel)
                            .addComponent(borrowBookBookIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borroBookBookSearchButton)
                            .addComponent(borrowBookmemberIdLabel)
                            .addComponent(borrowBookMemberIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrowBookMemberSearchButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookBookTitleLabel)
                            .addComponent(borrowBookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrowBookMemberNameLabel)
                            .addComponent(borrowBookMemberNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookBookCopiesLabel)
                            .addComponent(borrowBookCopiesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookFinePerDayLabel)
                            .addComponent(borrowBookFinePerDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookLibrarianIdLabel)
                            .addComponent(borrowBookLibrarianIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrowBookLibrarianSearchButton))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrowBookLibrarianNameLabel)
                            .addComponent(borrowBookLibrarianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowBookDateOfIssueLabel)
                    .addComponent(borrowBookDateOfIssueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowBookLabel)
                    .addComponent(borrowBookDueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowBookIssueButton)
                    .addComponent(clearBorrowBookButton))
                .addGap(179, 179, 179))
        );

        borrowBookTabbedPane.addTab("BORROWING BOOK", jPanel4);

        memberNameLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        memberNameLabel.setText("Name:");

        memberContactLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        memberContactLabel.setText("Contact:");

        memberEmailLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        memberEmailLabel.setText("Email:");

        memberGenderLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        memberGenderLabel.setText("Gernder:");

        memberPasswordLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        memberPasswordLabel.setText("Password:");

        memberNameTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        memberPhoneContactTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        memberEmailTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        memberGenderTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        memberPasswordTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        saveMemberButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        saveMemberButton.setText("Save");
        saveMemberButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMemberButtonMouseClicked(evt);
            }
        });
        saveMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMemberButtonActionPerformed(evt);
            }
        });

        updateMemberButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        updateMemberButton.setText("Update");
        updateMemberButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMemberButtonMouseClicked(evt);
            }
        });
        updateMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMemberButtonActionPerformed(evt);
            }
        });

        deleteMemberButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        deleteMemberButton.setText("Delete");
        deleteMemberButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMemberButtonMouseClicked(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        membersTable.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        membersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "CONTACT", "EMAIL", "GENDER"
            }
        ));
        jScrollPane2.setViewportView(membersTable);

        clearMemberButton.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        clearMemberButton.setText("Clear");
        clearMemberButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMemberButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memberNameLabel)
                            .addComponent(memberContactLabel)
                            .addComponent(memberEmailLabel)
                            .addComponent(memberGenderLabel)
                            .addComponent(memberPasswordLabel))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(memberNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberPhoneContactTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberEmailTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberGenderTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberPasswordTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(saveMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clearMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(40, 40, 40)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(updateMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(266, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberPhoneContactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberContactLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberEmailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberGenderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberGenderLabel))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberPasswordLabel)
                            .addComponent(memberPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(saveMemberButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearMemberButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateMemberButton)
                    .addComponent(deleteMemberButton))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.addTab("MEMBER", jPanel8);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel8.setText("Category Name:");

        categoryNameTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        categoryNameTextField.setToolTipText("Enter category name");

        saveCategoryButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        saveCategoryButton.setText("Save");
        saveCategoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveCategoryButtonMouseClicked(evt);
            }
        });

        updateCategoryButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        updateCategoryButton.setText("Update");
        updateCategoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateCategoryButtonMouseClicked(evt);
            }
        });

        deleteCategoryButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        deleteCategoryButton.setText("Delete");
        deleteCategoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteCategoryButtonMouseClicked(evt);
            }
        });

        jSeparator2.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator2.setForeground(new java.awt.Color(51, 51, 51));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        categoriesTable.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        categoriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Category ID", "Category Name"
            }
        ));
        jScrollPane3.setViewportView(categoriesTable);

        clearCategoryButton.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        clearCategoryButton.setText("Clear");
        clearCategoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearCategoryButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(categoryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(saveCategoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(clearCategoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(updateCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(607, 607, 607))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(categoryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(saveCategoryButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearCategoryButton))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteCategoryButton)
                    .addComponent(updateCategoryButton))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.addTab("CATEGORY", jPanel10);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        retrurnBookMemberIdLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        retrurnBookMemberIdLabel.setText("Member ID:");

        jLabel40.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel40.setText("Members Name:");

        jLabel43.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel43.setText("Book Title:");

        jLabel44.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel44.setText("Due date:");

        jLabel45.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel45.setText("Return date:");

        jLabel47.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel47.setText("Total Fine (Kshs):");

        returnBookMemberIdTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        returnBookMemberNameTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookMemberNameTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookMemberNameTextField.setEnabled(false);
        returnBookMemberNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookMemberNameTextFieldActionPerformed(evt);
            }
        });

        returnBookBookTitleTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookBookTitleTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookBookTitleTextField.setEnabled(false);
        returnBookBookTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookBookTitleTextFieldActionPerformed(evt);
            }
        });

        returnBookDueDateTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookDueDateTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookDueDateTextField.setEnabled(false);

        returnBookReturnDateTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookReturnDateTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookReturnDateTextField.setEnabled(false);

        returnBookTotalFineTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookTotalFineTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookTotalFineTextField.setEnabled(false);

        retrunBookButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        retrunBookButton.setText("Return");
        retrunBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retrunBookButtonMouseClicked(evt);
            }
        });
        retrunBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrunBookButtonActionPerformed(evt);
            }
        });

        returnBookSearchButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        returnBookSearchButton.setText("Search");
        returnBookSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnBookSearchButtonMouseClicked(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        jLabel48.setText("Issue date:");

        returnBookIssueDateTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        returnBookIssueDateTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        returnBookIssueDateTextField.setEnabled(false);
        returnBookIssueDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookIssueDateTextFieldActionPerformed(evt);
            }
        });

        borrowedBooksTable.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        borrowedBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Member ID", "Member Name", "Book ID", "Book Title", "Book Fine (Kshs)", "Issue Date", "Due Date"
            }
        ));
        jScrollPane4.setViewportView(borrowedBooksTable);

        clearReturnBookButton.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        clearReturnBookButton.setText("Clear");
        clearReturnBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearReturnBookButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addComponent(jLabel48)
                            .addComponent(jLabel43)
                            .addComponent(jLabel40)
                            .addComponent(jLabel45)
                            .addComponent(retrurnBookMemberIdLabel)
                            .addComponent(jLabel47))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(returnBookMemberNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(returnBookMemberIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(returnBookSearchButton))
                            .addComponent(returnBookBookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnBookIssueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(returnBookTotalFineTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(returnBookReturnDateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(returnBookDueDateTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(93, 93, 93))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clearReturnBookButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(retrunBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(93, 93, 93)))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookMemberIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(retrurnBookMemberIdLabel)
                            .addComponent(returnBookSearchButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookMemberNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookBookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookIssueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel48))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookDueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookReturnDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel45))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(returnBookTotalFineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(retrunBookButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearReturnBookButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(202, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.addTab("RETURN BOOK", jPanel11);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane2.setAlignmentY(2.0F);
        jTabbedPane2.setAutoscrolls(true);
        jTabbedPane2.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        jButton10.setBackground(new java.awt.Color(255, 204, 204));
        jButton10.setFont(new java.awt.Font("Book Antiqua", 3, 18)); // NOI18N
        jButton10.setText("PRINT");
        jButton10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable4.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(251, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("RETURNS REPORT", jPanel12);

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("BORROWING REPORT", jPanel13);

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("PAYMENT REPORT", jPanel15);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        borrowBookTabbedPane.addTab("REPORT", jPanel6);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox1.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        jButton1.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1142, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addContainerGap(539, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.addTab("SELECT PRINTER", jPanel5);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        bookCategoryNameLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookCategoryNameLabel.setText("Category Name:");

        bookTitleLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookTitleLabel.setText("Title:");

        bookEditionLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookEditionLabel.setText("Edition:");

        bookAuthorLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookAuthorLabel.setText("Author:");

        bookPublisherLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookPublisherLabel.setText("Publisher:");

        bookCopiesLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookCopiesLabel.setText("Copies:");

        bookFinePerDayLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookFinePerDayLabel.setText("Fine per day (Kshs):");

        bookRemarksLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookRemarksLabel.setText("Remarks");

        bookTitleTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        bookAuthorTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        bookPublisherTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        bookCopiesTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        bookFineTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        bookFineTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookFineTextFieldActionPerformed(evt);
            }
        });

        bookRemarkTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        booksTable.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Category", "Title", "Edition", "Author", "Publisher", "Available Copies", "Fine Per Day", "Remarks"
            }
        ));
        jScrollPane1.setViewportView(booksTable);

        saveBookButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        saveBookButton.setText("Save");
        saveBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBookButtonMouseClicked(evt);
            }
        });

        updateBookButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        updateBookButton.setText("Update");
        updateBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBookButtonMouseClicked(evt);
            }
        });

        deleteBookButton.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        deleteBookButton.setText("Delete");
        deleteBookButton.setToolTipText("");
        deleteBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBookButtonMouseClicked(evt);
            }
        });

        bookCategoryNameComboBox.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        bookEditionComboBox.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        bookEditionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        bookTypeLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookTypeLabel.setText("Book Type");

        bookTypeComboBox.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N
        bookTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book", "Journal", "Novel" }));
        bookTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bookTypeComboBoxItemStateChanged(evt);
            }
        });

        bookNoOfArticlesPublishedLabel.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        bookNoOfArticlesPublishedLabel.setText("No of Articles Published:");

        bookNoOfArticlesPublishedTextField.setFont(new java.awt.Font("Book Antiqua", 0, 12)); // NOI18N

        clearBooksButton.setFont(new java.awt.Font("Book Antiqua", 1, 12)); // NOI18N
        clearBooksButton.setText("Clear");
        clearBooksButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearBooksButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveBookButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookTypeLabel)
                            .addComponent(bookNoOfArticlesPublishedLabel)
                            .addComponent(bookRemarksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookCopiesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookPublisherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookEditionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookCategoryNameLabel)
                            .addComponent(bookFinePerDayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookAuthorTextField)
                            .addComponent(bookPublisherTextField)
                            .addComponent(bookCopiesTextField)
                            .addComponent(bookFineTextField)
                            .addComponent(bookRemarkTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(bookCategoryNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookTitleTextField)
                            .addComponent(bookEditionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookNoOfArticlesPublishedTextField)))
                    .addComponent(clearBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(updateBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(231, 231, 231))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateBookButton)
                            .addComponent(deleteBookButton)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookTypeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookCategoryNameLabel)
                            .addComponent(bookCategoryNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookTitleLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookEditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookEditionLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookAuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookAuthorLabel))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookPublisherLabel)
                            .addComponent(bookPublisherTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookCopiesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookCopiesLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookFinePerDayLabel)
                            .addComponent(bookFineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookRemarksLabel)
                            .addComponent(bookRemarkTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookNoOfArticlesPublishedLabel)
                            .addComponent(bookNoOfArticlesPublishedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(saveBookButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearBooksButton)))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        borrowBookTabbedPane.addTab("BOOK", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(borrowBookTabbedPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(borrowBookTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // public static final String  html = "<html><body><table><tr style=\"border-top:1px solid red\"><th>return_id</th><th>borrower_id</th><th>Member_id</th><th>Members name</th><th>Librarian id</th><th>librarian_name</th><th>Book id</th> <th>title</th><th>copies</th>"
    //      + " <th>release date</th><th>due date</th><th>fine</th>"
    //      + "<th>return date</th> <th>total fine</th></tr><tr><td> </td></tr></table></body></html>";

    private void borrowBookTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowBookTabbedPaneMouseClicked
        // TODO add your handling code here:
        jComboBox1.removeAllItems();
        jComboBox1.addItem("---SELECT PRINTER---");
        PrintService[] ps = PrinterJob.lookupPrintServices();
        for (int count = 0; count < ps.length; ++count) {

            jComboBox1.addItem(ps[count].getName());
        }
        setBookCategoryComboBox();
    }//GEN-LAST:event_borrowBookTabbedPaneMouseClicked
    public void Print() {
        String print = (String) jComboBox1.getSelectedItem();
        try {
            File file = new File("src/config/pconfig.txt");
            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(print);
            bw.close();
            System.out.println(print);
            System.out.println("Done");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Print();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMemberButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMemberButtonActionPerformed

    private void saveMemberButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMemberButtonMouseClicked
        // TODO add your handling code here:
        try {
            String sql = "INSERT INTO `readers`"
                    + "(`reader_Name`, `Contact`, `Email`, `Gender`, `Password`)"
                    + " VALUES (?,?,?,?,?)";
            Connection con = dBConnectionInterface.connect();
            pst = con.prepareStatement(sql);

            String name = memberNameTextField.getText();
            String phone = memberPhoneContactTextField.getText();
            String email = memberEmailTextField.getText();
            String gender = memberGenderTextField.getText();
            String password = memberPasswordTextField.getText();

            if (name == null) {
                JOptionPane.showMessageDialog(null, "Please enter name.");
            }

            if (email == null) {
                JOptionPane.showMessageDialog(null, "Please enter email.");
            }

            if (password == null) {
                JOptionPane.showMessageDialog(null, "Please enter email.");
            }

            pst.setString(1, name);
            pst.setString(2, phone);
            pst.setString(3, email);
            pst.setString(4, gender);
            pst.setString(5, password);

            int memberAdded = pst.executeUpdate();

            if (memberAdded == 1) {
                JOptionPane.showMessageDialog(null, "Member added successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Unable to add Member. Please try again later.");
            }
            DefaultTableModel model = (DefaultTableModel) membersTable.getModel();
            model.setRowCount(0);
            membersTable.setModel(model);
            
            displayMembersTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);

        }
    }//GEN-LAST:event_saveMemberButtonMouseClicked

    private void deleteMemberButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMemberButtonMouseClicked
        // TODO add your handling code here:
        try {

            String sql = "DELETE FROM `readers` WHERE `readers_id`=?";
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, member.getId().toString());

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "DELETE successfully ");
            DefaultTableModel model = (DefaultTableModel) membersTable.getModel();
            model.setRowCount(0);
            displayMembersTable();
            clearMemberTextFields();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_deleteMemberButtonMouseClicked

    private void updateMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMemberButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateMemberButtonActionPerformed

    private void updateMemberButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMemberButtonMouseClicked
        // TODO add your handling code here:
        try {
            String sql = "UPDATE `readers` SET `reader_Name`=?,`Contact`=?,`Email`=?,`Gender`=?,`Password`=?  WHERE `readers_id`=? ";

            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, memberNameTextField.getText());
            pst.setString(2, memberPhoneContactTextField.getText());
            pst.setString(3, memberEmailTextField.getText());
            pst.setString(4, memberGenderTextField.getText());
            pst.setString(5, memberPasswordTextField.getText());
            pst.setString(6, member.getId().toString());
            int menberUpdated = pst.executeUpdate();
            if (menberUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Member updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Unable to update member");
            }
            displayMembersTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_updateMemberButtonMouseClicked

    private void saveCategoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveCategoryButtonMouseClicked

        try {
            String sql = "INSERT INTO `category`"
                    + "(`Category_name`)"
                    + " VALUES (?)";
            Connection con = dBConnectionInterface.connect();
            pst = con.prepareStatement(sql);

            String categoryName = categoryNameTextField.getText();
            if (categoryName == null) {
                JOptionPane.showMessageDialog(null, "Please enter a category name");
            }
            pst.setString(1, categoryName);

            int addCategory = pst.executeUpdate();
            if (addCategory == 1) {
                JOptionPane.showMessageDialog(null, "Category added successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Unable to add category please try again later.");
            }

            DefaultTableModel model = (DefaultTableModel) categoriesTable.getModel();
            model.setRowCount(0);
            displayCategoriesTable();
        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Unable to add category please try again later.");

        }
    }//GEN-LAST:event_saveCategoryButtonMouseClicked

    private void deleteCategoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCategoryButtonMouseClicked
        // TODO add your handling code here:
        try {

            int deleteCount = 0; // Number of deleted categories

            DefaultTableModel model = (DefaultTableModel) categoriesTable.getModel();
            int[] rows = categoriesTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                //model.removeRow(rows[i] - i);

                String sql = "DELETE FROM `category` WHERE`Category_id`=?";
                Connection con = DatabaseConnection.ConnecrDb();
                pst = con.prepareStatement(sql);
                String categoryId = String.valueOf(model.getValueAt(rows[i] - i, 0)); // Get the selected category ID
                pst.setString(1, categoryId);
                int deletedCategory = pst.executeUpdate();
                if (deletedCategory == 1) {
                    deleteCount++;
                }
            }
            String deletedMsg = deleteCount + " categories deleted";
            JOptionPane.showMessageDialog(null, deletedMsg);
            displayCategoriesTable();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_deleteCategoryButtonMouseClicked

    private void updateCategoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryButtonMouseClicked

        try {
            String sql = "UPDATE `category` SET `Category_name`=? WHERE `Category_id`=? ";

            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, categoryNameTextField.getText());
            pst.setString(2, String.valueOf(category.getId()));

            int updatedCategory = pst.executeUpdate();
            if (updatedCategory == 1) {
                JOptionPane.showMessageDialog(null, "Category updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Unable to update category.");
            }

            DefaultTableModel model = (DefaultTableModel) categoriesTable.getModel();
            model.setRowCount(0);
            displayCategoriesTable();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occured. Please try again later.");
        }
    }//GEN-LAST:event_updateCategoryButtonMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked

    private void borrowBookLibrarianNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBookLibrarianNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowBookLibrarianNameTextFieldActionPerformed

    private void borrowBookTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBookTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowBookTitleTextFieldActionPerformed

    private void borroBookBookSearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borroBookBookSearchButtonMouseClicked
        // TODO add your handling code here:
        String sql = "SELECT * FROM `book` WHERE `Book_id`=?";
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, borrowBookBookIdTextField.getText());
            resultSet = pst.executeQuery();
            if (resultSet.next()) {
                String add1 = resultSet.getString("Title");
                borrowBookTitleTextField.setText(add1);

                String add2 = resultSet.getString("Copies");
                borrowBookCopiesTextField.setText(add2);

                String add3 = resultSet.getString("Fineperday");
                borrowBookFinePerDayTextField.setText(add3);

                resultSet.close();
                pst.close();

                setBorrowBookDates();
            } else {
                JOptionPane.showMessageDialog(null, "Book is not found");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_borroBookBookSearchButtonMouseClicked

    private void borrowBookMemberSearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowBookMemberSearchButtonMouseClicked
        // TODO add your handling code here:
        String sql = "SELECT * FROM `readers` WHERE `readers_id`=?";
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, borrowBookMemberIdTextField.getText());
            resultSet = pst.executeQuery();
            if (resultSet.next()) {
                String add4 = resultSet.getString("reader_Name");
                borrowBookMemberNameTextField.setText(add4);

                resultSet.close();
                pst.close();
            } else {
                JOptionPane.showMessageDialog(null, "reader is not found");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_borrowBookMemberSearchButtonMouseClicked

    private void borrowBookLibrarianSearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowBookLibrarianSearchButtonMouseClicked
        // TODO add your handling code here:
        String sql = "SELECT * FROM `librarian` WHERE `librarian_Id`=?";
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, borrowBookLibrarianIdTextField.getText());
            resultSet = pst.executeQuery();
            if (resultSet.next()) {
                String add5 = resultSet.getString("librarian_name");
                borrowBookLibrarianNameTextField.setText(add5);

                resultSet.close();
                pst.close();
            } else {
                JOptionPane.showMessageDialog(null, "librarian  is not found");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_borrowBookLibrarianSearchButtonMouseClicked

    private void borrowBookIssueButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowBookIssueButtonMouseClicked
        // TODO add your handling code here:
        String sql = "INSERT INTO `borrowers`(`Book_id`, `Title`, `copies`, `Fineperday`, `readers_id`,"
                + "`librarian_id`, `releasedate`, `duedate`)"
                + "values(?,?,?,?,?,?,?,?)";
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, borrowBookBookIdTextField.getText());
            pst.setString(2, borrowBookTitleTextField.getText());
            pst.setString(3, borrowBookCopiesTextField.getText());
            pst.setString(4, borrowBookFinePerDayTextField.getText());
            pst.setString(5, borrowBookMemberIdTextField.getText());
            pst.setString(6, borrowBookLibrarianIdTextField.getText());

            Date today = new Date();
            today.toString();

            // Set Due Date to be 10 days after issue
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DAY_OF_MONTH, 10);
            Date dueDate = cal.getTime();

            java.sql.Date todayDBDate = new java.sql.Date(today.getTime());
            java.sql.Date dueDateDBDate = new java.sql.Date(dueDate.getTime());

            pst.setDate(7, todayDBDate);
            pst.setDate(8, dueDateDBDate);

            int bookIssued = pst.executeUpdate();
            if (bookIssued > 0) {
                JOptionPane.showMessageDialog(null, "Book succcessfully issued.");
                displayBorrowedBooksTable();
            } else {
                JOptionPane.showMessageDialog(null, "Book not issued. An error occusred");
            }
        } catch (Exception e) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Failed to issue book. An exception occurred. Please try again later.");
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(null, "Failed to issue book. An exception occurred. Please try again later.");
            }
        }
    }//GEN-LAST:event_borrowBookIssueButtonMouseClicked

    private void returnBookBookTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookBookTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnBookBookTitleTextFieldActionPerformed

    private void returnBookSearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnBookSearchButtonMouseClicked

        String memberId = returnBookMemberIdTextField.getText();
        if (memberId == null || memberId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please input Member ID.");
            return;
        }

        String sql = "SELECT borrowers.readers_id as 'Member ID', readers.reader_name 'Member Name', borrowers.Book_id as 'Book ID', book.Title as 'Book Title', \n"
                + "releasedate as 'Issue Date', duedate as 'Due Date' FROM `borrowers` \n"
                + "LEFT JOIN readers ON readers.readers_id = borrowers.readers_id \n"
                + "LEFT JOIN book ON book.Book_id = borrowers.Book_id \n"
                + "WHERE borrowers.readers_id = ? and `return_date` IS NULL";

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            int readerId = Integer.parseInt(memberId);

            pst.setInt(1, readerId);
            resultSet = pst.executeQuery();

            if (!resultSet.next()) {
                JOptionPane.showMessageDialog(null, "The Member has no borrowed book.");
                return;
            }

            borrowedBooksTable.setModel(DbUtils.resultSetToTableModel(resultSet));

        } catch (Exception e) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Sorry, an error occured.");
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(null, "Sorry, an error occured.");
            }
        }
    }//GEN-LAST:event_returnBookSearchButtonMouseClicked

    private void retrunBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retrunBookButtonMouseClicked

        returnBorrowedBook();
        //delete();
    }//GEN-LAST:event_retrunBookButtonMouseClicked

    private void returnBookIssueDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookIssueDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnBookIssueDateTextFieldActionPerformed

    private void bookFineTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookFineTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookFineTextFieldActionPerformed

    private void saveBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBookButtonMouseClicked

        saveBookDetails();
    }//GEN-LAST:event_saveBookButtonMouseClicked

    private void updateBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBookButtonMouseClicked
        try {
            String sql = "UPDATE `book` SET `Category_id`=?, `Title`=?, `Edition`=?,`Author`=?, `Publisher`=?, `Copies`=?, `Fineperday`=?, `Remarks`=? WHERE `book_id`=? ";

            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);

            Category category = (Category) bookCategoryNameComboBox.getSelectedItem();
            pst.setString(1, category.getId().toString());
            pst.setString(2, bookTitleTextField.getText());
            pst.setString(3, bookEditionComboBox.getSelectedItem().toString());
            pst.setString(4, bookAuthorTextField.getText());
            pst.setString(5, bookPublisherTextField.getText());
            pst.setString(6, bookCopiesTextField.getText());
            pst.setString(7, bookFineTextField.getText());
            pst.setString(8, bookRemarkTextField.getText());
            pst.setString(9, book.getId().toString());

            int updatedCategory = pst.executeUpdate();
            if (updatedCategory == 1) {
                JOptionPane.showMessageDialog(null, "Book updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Unable to update selected book.");
            }

            DefaultTableModel model = (DefaultTableModel) booksTable.getModel();
            model.setRowCount(0);
            displayCategoriesTable();
        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "An error occured. Please try again later.");
        }
    }//GEN-LAST:event_updateBookButtonMouseClicked

    private void deleteBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBookButtonMouseClicked
        try {

            int deleteCount = 0; // Number of deleted categories

            DefaultTableModel model = (DefaultTableModel) booksTable.getModel();
            int[] rows = booksTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {

                String sql = "DELETE FROM `book` WHERE`Book_id`=?";
                Connection con = DatabaseConnection.ConnecrDb();
                pst = con.prepareStatement(sql);
                String bookId = String.valueOf(model.getValueAt(rows[i] - i, 0)); // Get the selected book ID
                pst.setString(1, bookId);
                int deletedCategory = pst.executeUpdate();
                if (deletedCategory == 1) {
                    deleteCount++;
                }
            }
            String deletedMsg = deleteCount + " book(s) deleted";
            JOptionPane.showMessageDialog(null, deletedMsg);
            displayCategoriesTable();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "An error occurred while deleting book. Please try later.");
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteBookButtonMouseClicked

    // Implementation of Factory Pattern
    private void bookTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bookTypeComboBoxItemStateChanged

        if (evt == null) {
            return;
        }

        String selectedBookType = bookTypeComboBox.getSelectedItem().toString();
        switch (selectedBookType) {
            case "Novel":
                NovelFactory novelFactory = new NovelFactory();
                book = novelFactory.createBook();
                break;
            case "Journal":
                JournalFactory journalFactory = new JournalFactory();
                book = journalFactory.createBook();
                hideBookFields();
                break;
            case "Book":
            default:
                NormalBookFactory normalBookFactory = new NormalBookFactory();
                book = normalBookFactory.createBook();
                break;
        }

    }//GEN-LAST:event_bookTypeComboBoxItemStateChanged

    private void borrowBookDueDateTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowBookDueDateTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowBookDueDateTextFieldMouseClicked

    private void returnBookMemberNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookMemberNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnBookMemberNameTextFieldActionPerformed

    private void retrunBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrunBookButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_retrunBookButtonActionPerformed

    private void clearMemberButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMemberButtonMouseClicked
        clearMemberTextFields();
    }//GEN-LAST:event_clearMemberButtonMouseClicked

    private void clearCategoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearCategoryButtonMouseClicked
        clearCategroyTextFields();
    }//GEN-LAST:event_clearCategoryButtonMouseClicked

    private void clearBooksButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBooksButtonMouseClicked
        clearBookTextFields();
    }//GEN-LAST:event_clearBooksButtonMouseClicked

    private void clearReturnBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearReturnBookButtonMouseClicked

        returnBookMemberIdTextField.setText("");
        returnBookMemberNameTextField.setText("");
        returnBookBookTitleTextField.setText("");
        returnBookIssueDateTextField.setText("");
        returnBookDueDateTextField.setText("");
        returnBookReturnDateTextField.setText("");
        returnBookTotalFineTextField.setText("");

        displayBorrowedBooksTable();
    }//GEN-LAST:event_clearReturnBookButtonMouseClicked

    private void clearBorrowBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBorrowBookButtonMouseClicked
        borrowBookBookIdTextField.setText("");
        borrowBookTitleTextField.setText("");
        borrowBookCopiesTextField.setText("");
        borrowBookFinePerDayTextField.setText("");
        borrowBookDateOfIssueTextField.setText("");
        borrowBookDueDateTextField.setText("");
        borrowBookMemberIdTextField.setText("");
        borrowBookMemberNameTextField.setText("");
        borrowBookLibrarianIdTextField.setText("");
        borrowBookLibrarianNameTextField.setText("");
    }//GEN-LAST:event_clearBorrowBookButtonMouseClicked

    public void returnBorrowedBook() {

        if (borrowTransaction == null || borrowTransaction.getMemberId() == null || borrowTransaction.getBookId() == null) {
            JOptionPane.showMessageDialog(null, "Please select a book to be returned.");
            return;
        }

//        Date today = new Date();
//        Calendar c = Calendar.getInstance();
//        c.setTime(today);
//        c.add(Calendar.DATE, 11);
//        Date testReturnDate = c.getTime();
        java.sql.Date returnDate = new java.sql.Date(new Date().getTime());

        String sql = "UPDATE `borrowers` \n"
                + "SET return_date = ?\n"
                + "WHERE readers_id = ? AND Book_id= ?";

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setDate(1, returnDate);
            pst.setInt(2, borrowTransaction.getMemberId());
            pst.setInt(3, borrowTransaction.getBookId());

            int bookRurned = pst.executeUpdate();
            if (bookRurned > 0) {
                JOptionPane.showMessageDialog(null, "Book successfully returned.");
                displayBorrowedBooksTable();
                update1();
            } else {
                JOptionPane.showMessageDialog(null, "Unable to return book.");
            }
        } catch (Exception e) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Failed to return book.");
        }

    }

    public void setBookCategoryComboBox() {

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String sql = "SELECT * FROM `category`";
            pst = con.prepareStatement(sql);

            resultSet = pst.executeQuery();
            bookCategoryNameComboBox.removeAllItems();
            while (resultSet.next()) {
                Category bookCategory = new Category();
                bookCategory.setId(Integer.valueOf(resultSet.getString(1)));
                bookCategory.setName(resultSet.getString(2));

                bookCategoryNameComboBox.addItem(bookCategory);
                bookCategoryNameComboBox.setRenderer(new CategoryListCellRenderer());

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    public void delete() {
        String sql = "DELETE FROM `borrowers` WHERE `readers_id`=?";
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            pst.setString(1, returnBookMemberIdTextField.getText());
            pst.execute();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void update1() {
        int st = Integer.parseInt("1");
        int q = 1;
        int sup = st + q;
        String s = String.valueOf(sup);
        //jTextField43.setText(s);
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String val1 = ""; //jTextField36.getText();
            String val2 = ""; //jTextField43.getText();
            String sql = "update book set Book_id='" + val1 + "', "
                    + "Copies='" + val2 + "' where Book_id='" + val1 + "'";
            pst = con.prepareStatement(sql);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Record Updated");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void updateBorrowBook() {
        int st = Integer.parseInt(borrowBookCopiesTextField.getText());
        int q = 1;
        int sup = st - q;
        String s = String.valueOf(sup);
        borrowBookCopiesTextField.setText(s);
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            int n = Integer.parseInt(s);
            if (n == 0) {
                String val1 = borrowBookBookIdTextField.getText();
                String val2 = borrowBookCopiesTextField.getText();
                String sql = "update book set Book_id='" + val1 + "', "
                        + "Copies='" + val2 + "' where Book_id='" + val1 + "'";
                pst = con.prepareStatement(sql);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record Updated");
            } else {
                JOptionPane.showMessageDialog(null, "Book is not issued");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                resultSet.close();
                pst.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public void saveBookDetails() {

        String title, edition, author, publisher;
        if (bookTitleTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter book title");
        }

        if (bookAuthorTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter book author");
        }

        if (bookPublisherTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter book publisher");
        }

        if (bookCopiesTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter number of book copies");
        }

        if (bookFineTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter book fine");
        }

        try {
            String sql = "INSERT INTO `book`"
                    + "( `Category_id`, `Title`, `Edition`, `Author`, `Publisher`,`Copies`, `Fineperday`, `Remarks`) "
                    + "values (?,?,?,?,?,?,?,?)";
            Connection con = DatabaseConnection.ConnecrDb();
            pst = con.prepareStatement(sql);
            selectedBookCategory = (Category) bookCategoryNameComboBox.getSelectedItem();
            pst.setString(1, selectedBookCategory.getId().toString());

            pst.setString(2, bookTitleTextField.getText());
            String values;
            values = bookEditionComboBox.getSelectedItem().toString();
            pst.setString(3, values);
            pst.setString(4, bookAuthorTextField.getText());
            pst.setString(5, bookPublisherTextField.getText());
            pst.setString(6, bookCopiesTextField.getText());
            pst.setString(7, bookFineTextField.getText());
            pst.setString(8, bookRemarkTextField.getText());

            pst.execute();
            JOptionPane.showMessageDialog(null, "New book added");
            displayBooksTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occured please try again later.");
        }

    }

    public void connect() throws IOException {
        try {
            BufferedReader bufReader = new BufferedReader(new FileReader("src/config/dbconfig.txt"));
            ArrayList<String> listOfLines = new ArrayList<>();
            String line = bufReader.readLine();

            while (line != null) {
                listOfLines.add(line);
                line = bufReader.readLine();
                System.out.println(line);
            }

            System.out.println(listOfLines.get(0));
            System.out.println(listOfLines.get(1));
            System.out.println(listOfLines.get(2));
            System.out.println(listOfLines.get(3));
            System.out.println(listOfLines.get(4));
            bufReader.close();

            Class.forName("com.mysql.jdbc.Driver");

            String host = listOfLines.get(0);
            String db = listOfLines.get(1);
            String pass = listOfLines.get(2);
            String port = listOfLines.get(3);
            String username = listOfLines.get(4);

            Connection conn = DriverManager.getConnection("jdbc:mysql://" + host + ":" + port + "/" + db, username, pass);

        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void displayMembersTable() {

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String sql = "SELECT readers_id as 'ID', reader_name as 'Name', Email, Contact as 'Phone Number', Gender FROM `readers`";
            pst = con.prepareStatement(sql);
            resultSet = pst.executeQuery();
            membersTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "An error occurred while retrieving members.");
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayBooksTable() {

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String sql = "SELECT Book_id as 'ID', book.Category_id as 'Cat ID',category.Category_name as 'Cat Name', Title, Edition, Author,\n"
                    + "Publisher, Copies 'Available Copies', Fineperday AS 'Fine per day', Remarks FROM `book` LEFT JOIN category ON category.Category_id = book.Category_id";
            pst = con.prepareStatement(sql);
            resultSet = pst.executeQuery();
            booksTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "An error occurred while retrieving books.");
        }
    }

    private void displayCategoriesTable() {

        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String sql = "SELECT * FROM `category`";
            pst = con.prepareStatement(sql);
            resultSet = pst.executeQuery();
            categoriesTable.setModel(DbUtils.resultSetToTableModel(resultSet));
        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "An error occurred while retrieving categories.");
        }
    }

    public void displayBorrowedBooksTable() {
        try {
            Connection con = DatabaseConnection.ConnecrDb();
            String sql = "SELECT borrowers.readers_id as 'Member ID', readers.reader_name 'Member Name', borrowers.Book_id as 'Book ID', book.Title as 'Book Title', \n"
                    + "book.Fineperday as 'Book Fine/Day', releasedate as 'Issue Date', duedate as 'Due Date' FROM `borrowers` \n"
                    + "LEFT JOIN readers ON readers.readers_id = borrowers.readers_id \n"
                    + "LEFT JOIN book ON book.Book_id = borrowers.Book_id \n"
                    + "WHERE `return_date` IS NULL;";
            pst = con.prepareStatement(sql);
            resultSet = pst.executeQuery();

            // First clear the table then populate it to prevent multiple population by other methods
            DefaultTableModel model = (DefaultTableModel) borrowedBooksTable.getModel();
            model.setRowCount(0);
            borrowedBooksTable.setModel(model);
            if (resultSet.next()) {
                borrowedBooksTable.setModel(DbUtils.resultSetToTableModel(resultSet));
            } else {
                JOptionPane.showMessageDialog(null, "There are no borrowed books.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "An error occurred while retrieving books.");
        }
    }

    private void setCategoriesTableListener() {

        categoriesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                int categoryId = Integer.valueOf(categoriesTable.getValueAt(categoriesTable.getSelectedRow(), 0).toString());
                String categoryName = categoriesTable.getValueAt(categoriesTable.getSelectedRow(), 1).toString();
                category = new Category();

                category.setId(categoryId);
                category.setName(categoryName);

                setCategoryTextFieldValues();

            }
        });
    }

    private void setBooksTableListener() {

        booksTable.setRowSelectionAllowed(true);
        booksTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                int bookId = Integer.valueOf(booksTable.getValueAt(booksTable.getSelectedRow(), 0).toString());
                int categoryId = Integer.valueOf(booksTable.getValueAt(booksTable.getSelectedRow(), 1).toString());
                String categoryName = booksTable.getValueAt(booksTable.getSelectedRow(), 2).toString();
                String title = booksTable.getValueAt(booksTable.getSelectedRow(), 3).toString();
                String edition = booksTable.getValueAt(booksTable.getSelectedRow(), 4).toString();
                String author = booksTable.getValueAt(booksTable.getSelectedRow(), 5).toString();
                String publisher = booksTable.getValueAt(booksTable.getSelectedRow(), 6).toString();
                int copies = Integer.valueOf(booksTable.getValueAt(booksTable.getSelectedRow(), 7).toString());
                int finePerDay = Integer.valueOf(booksTable.getValueAt(booksTable.getSelectedRow(), 8).toString());
                String remarks = booksTable.getValueAt(booksTable.getSelectedRow(), 9).toString();

                book = new Book();
                book.setId(bookId);
                book.setCategoryId(categoryId);
                book.setTitle(title);
                book.setEdition(edition);
                book.setAuthor(author);
                book.setPublisher(publisher);
                book.setCopies(copies);
                book.setFinePerDay(finePerDay);
                book.setRemarks(remarks);

                selectedBookCategory = new Category();
                selectedBookCategory.setId(categoryId);
                selectedBookCategory.setName(categoryName);

                setBookTextFieldValues();

            }
        });
    }

    private void setBorrowedBooksTableListener() {

        borrowedBooksTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                String memberId = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 0).toString();
                String memberName = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 1).toString();
                String bookId = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 2).toString();
                String bookTitle = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 3).toString();
                String bookFinePerDay = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 4).toString();
                String issueDate = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 5).toString();
                String dueDate = borrowedBooksTable.getValueAt(borrowedBooksTable.getSelectedRow(), 6).toString();

                borrowTransaction = new BorrowTransaction();
                borrowTransaction.setMemberId(Integer.parseInt(memberId));
                borrowTransaction.setBookId(Integer.parseInt(bookId));
                borrowTransaction.setFine(Integer.parseInt(bookFinePerDay));
                try {
                    SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    borrowTransaction.setDueDate(sqlDateFormat.parse(dueDate));
                    borrowTransaction.setIssueDate(sqlDateFormat.parse(issueDate));
                } catch (ParseException ex) {
                    Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
                }

                returnBookMemberIdTextField.setText(memberId);
                returnBookMemberNameTextField.setText(memberName);
                returnBookBookTitleTextField.setText(bookTitle);
                returnBookIssueDateTextField.setText(dateFormat.format(borrowTransaction.getIssueDate()));
                returnBookDueDateTextField.setText(dateFormat.format(borrowTransaction.getDueDate()));

                Date today = new Date();
                returnBookReturnDateTextField.setText(dateFormat.format(today));

                BookFineFacade bookFacade = new BookFineFacade(borrowTransaction);
                String bookFine = String.format("%.2f", bookFacade.createBookFine());
                returnBookTotalFineTextField.setText(bookFine);

                setReturnBooksTextFieldValues();

            }
        });
    }

    private void setMembersTableListener() {

        membersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                int memberId = Integer.valueOf(membersTable.getValueAt(membersTable.getSelectedRow(), 0).toString());
                String memberName = membersTable.getValueAt(membersTable.getSelectedRow(), 1).toString();
                String memberEmail = membersTable.getValueAt(membersTable.getSelectedRow(), 2).toString();
                String memberContact = membersTable.getValueAt(membersTable.getSelectedRow(), 3).toString();
                String memberGender = membersTable.getValueAt(membersTable.getSelectedRow(), 4).toString();

                String memberPassword = "";

                member = new UserMember();
                member.setId(memberId);
                member.setName(memberName);
                member.setPhoneContact(memberContact);
                member.setEmail(memberEmail);
                member.setGender(memberGender);
                member.setPassword(memberPassword);

                setMemberTextFieldValues();

            }
        });
    }

    private void setBookTextFieldValues() {
        if (book != null) {
            if (book.getTitle() != null) {
                bookTitleTextField.setText(book.getTitle());
            }

            if (book.getAuthor() != null) {
                bookAuthorTextField.setText(book.getAuthor());
            }

            if (book.getPublisher() != null) {
                bookPublisherTextField.setText(book.getPublisher());
            }

            if (book.getCopies() != null) {
                bookCopiesTextField.setText(book.getCopies().toString());
            }

            if (book.getFinePerDay() != null) {
                bookFineTextField.setText(book.getFinePerDay().toString());
            }

            if (book.getRemarks() != null) {
                bookRemarkTextField.setText(book.getRemarks());
            }

            if (book.getCategoryId() != null) {
                bookCategoryNameComboBox.setSelectedItem((Category) selectedBookCategory);
            }

            if (book.getEdition() != null) {
                bookEditionComboBox.setSelectedItem(book.getEdition());
            }
        }
    }

    private void setCategoryTextFieldValues() {
        if (category != null) {
            if (category.getName() != null) {
                categoryNameTextField.setText(category.getName());
            }
        }
    }

    private void setReturnBooksTextFieldValues() {

    }

    private void setMemberTextFieldValues() {
        if (member != null) {

            if (member.getName() != null) {
                memberNameTextField.setText(member.getName());
            }

            if (member.getEmail() != null) {
                memberEmailTextField.setText(member.getEmail());
            }

            if (member.getPhoneContact() != null) {
                memberPhoneContactTextField.setText(member.getPhoneContact());
            }

            if (member.getPassword() != null) {
                memberPasswordTextField.setText(member.getPassword());
            }

            if (member.getGender() != null) {
                memberGenderTextField.setText(member.getGender());
            }
        }
    }

    private void clearMemberTextFields() {
        member = null;

        memberNameTextField.setText("");
        memberPhoneContactTextField.setText("");
        memberGenderTextField.setText("");
        memberPasswordTextField.setText("");
        memberEmailTextField.setText("");
    }

    private void clearCategroyTextFields() {
        category = null;
        categoryNameTextField.setText("");
    }

    private void clearBookTextFields() {
        bookTitleTextField.setText("");
        bookAuthorTextField.setText("");
        bookPublisherTextField.setText("");
        bookCopiesTextField.setText("");
        bookFineTextField.setText("");
        bookRemarkTextField.setText("");
        bookNoOfArticlesPublishedTextField.setText("");

//        selectedBookCategory = null;
//        bookCategoryNameComboBox.setSelectedItem((Category) selectedBookCategory);
    }

    private void hideBookFields() {
        bookNoOfArticlesPublishedTextField.setEnabled(false);
        bookNoOfArticlesPublishedLabel.setEnabled(false);
    }

    private void showBookFields() {
        bookNoOfArticlesPublishedTextField.setEnabled(true);
        bookNoOfArticlesPublishedLabel.setEnabled(true);
    }

    private void setBorrowBookDates() {
        Date today = new Date();
        today.toString();

        // Set Due Date to be 10 days after issue
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 10);
        Date dueDate = cal.getTime();

        borrowBookDateOfIssueTextField.setEditable(false);
        borrowBookDateOfIssueTextField.setText(dateFormat.format(today));

        borrowBookDueDateTextField.setEditable(false);
        borrowBookDueDateTextField.setText(dateFormat.format(dueDate));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Librarians().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bookAuthorLabel;
    private javax.swing.JTextField bookAuthorTextField;
    private javax.swing.JComboBox<Category> bookCategoryNameComboBox;
    private javax.swing.JLabel bookCategoryNameLabel;
    private javax.swing.JLabel bookCopiesLabel;
    private javax.swing.JTextField bookCopiesTextField;
    private javax.swing.JComboBox<String> bookEditionComboBox;
    private javax.swing.JLabel bookEditionLabel;
    private javax.swing.JLabel bookFinePerDayLabel;
    private javax.swing.JTextField bookFineTextField;
    private javax.swing.JLabel bookNoOfArticlesPublishedLabel;
    private javax.swing.JTextField bookNoOfArticlesPublishedTextField;
    private javax.swing.JLabel bookPublisherLabel;
    private javax.swing.JTextField bookPublisherTextField;
    private javax.swing.JTextField bookRemarkTextField;
    private javax.swing.JLabel bookRemarksLabel;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JTextField bookTitleTextField;
    private javax.swing.JComboBox<String> bookTypeComboBox;
    private javax.swing.JLabel bookTypeLabel;
    private javax.swing.JTable booksTable;
    private javax.swing.JButton borroBookBookSearchButton;
    private javax.swing.JLabel borrowBookBookCopiesLabel;
    private javax.swing.JLabel borrowBookBookIDLabel;
    private javax.swing.JTextField borrowBookBookIdTextField;
    private javax.swing.JLabel borrowBookBookTitleLabel;
    private javax.swing.JTextField borrowBookCopiesTextField;
    private javax.swing.JLabel borrowBookDateOfIssueLabel;
    private javax.swing.JTextField borrowBookDateOfIssueTextField;
    private javax.swing.JTextField borrowBookDueDateTextField;
    private javax.swing.JLabel borrowBookFinePerDayLabel;
    private javax.swing.JTextField borrowBookFinePerDayTextField;
    private javax.swing.JButton borrowBookIssueButton;
    private javax.swing.JLabel borrowBookLabel;
    private javax.swing.JLabel borrowBookLibrarianIdLabel;
    private javax.swing.JTextField borrowBookLibrarianIdTextField;
    private javax.swing.JLabel borrowBookLibrarianNameLabel;
    private javax.swing.JTextField borrowBookLibrarianNameTextField;
    private javax.swing.JButton borrowBookLibrarianSearchButton;
    private javax.swing.JTextField borrowBookMemberIdTextField;
    private javax.swing.JLabel borrowBookMemberNameLabel;
    private javax.swing.JTextField borrowBookMemberNameTextField;
    private javax.swing.JButton borrowBookMemberSearchButton;
    private javax.swing.JTabbedPane borrowBookTabbedPane;
    private javax.swing.JTextField borrowBookTitleTextField;
    private javax.swing.JLabel borrowBookmemberIdLabel;
    private javax.swing.JTable borrowedBooksTable;
    private javax.swing.JTable categoriesTable;
    private javax.swing.JTextField categoryNameTextField;
    private javax.swing.JButton clearBooksButton;
    private javax.swing.JButton clearBorrowBookButton;
    private javax.swing.JButton clearCategoryButton;
    private javax.swing.JButton clearMemberButton;
    private javax.swing.JButton clearReturnBookButton;
    private javax.swing.JButton deleteBookButton;
    private javax.swing.JButton deleteCategoryButton;
    private javax.swing.JButton deleteMemberButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable4;
    private javax.swing.JLabel memberContactLabel;
    private javax.swing.JLabel memberEmailLabel;
    private javax.swing.JTextField memberEmailTextField;
    private javax.swing.JLabel memberGenderLabel;
    private javax.swing.JTextField memberGenderTextField;
    private javax.swing.JLabel memberNameLabel;
    private javax.swing.JTextField memberNameTextField;
    private javax.swing.JLabel memberPasswordLabel;
    private javax.swing.JTextField memberPasswordTextField;
    private javax.swing.JTextField memberPhoneContactTextField;
    private javax.swing.JTable membersTable;
    private javax.swing.JButton retrunBookButton;
    private javax.swing.JLabel retrurnBookMemberIdLabel;
    private javax.swing.JTextField returnBookBookTitleTextField;
    private javax.swing.JTextField returnBookDueDateTextField;
    private javax.swing.JTextField returnBookIssueDateTextField;
    private javax.swing.JTextField returnBookMemberIdTextField;
    private javax.swing.JTextField returnBookMemberNameTextField;
    private javax.swing.JTextField returnBookReturnDateTextField;
    private javax.swing.JButton returnBookSearchButton;
    private javax.swing.JTextField returnBookTotalFineTextField;
    private javax.swing.JButton saveBookButton;
    private javax.swing.JButton saveCategoryButton;
    private javax.swing.JButton saveMemberButton;
    private javax.swing.JButton updateBookButton;
    private javax.swing.JButton updateCategoryButton;
    private javax.swing.JButton updateMemberButton;
    // End of variables declaration//GEN-END:variables
}
